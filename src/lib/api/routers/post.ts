// src/lib/api/routers/post.ts
import { z } from "zod";
import {
  createTRPCRouter,
  protectedProcedure,
  publicProcedure,
} from "@/lib/api/trpc";

// Type declaration that includes Post model for TypeScript
declare module "@prisma/client" {
  interface PrismaClient {
    post: {
      create: <T extends { data: { name: string; createdBy: { connect: { id: string } } } }>(
        args: T
      ) => Promise<{ id: number; name: string; createdAt: Date; updatedAt: Date; createdById: string }>;
      findFirst: <T extends { 
        orderBy?: { createdAt?: "asc" | "desc" }; 
        where?: { createdBy?: { id?: string } };
        select?: Record<string, boolean>;
      }>(
        args: T
      ) => Promise<{ 
        id: number; 
        name: string; 
        createdAt: Date; 
        updatedAt: Date; 
        createdById: string 
      } | null>;
      // Add other methods as needed
    };
  }
}

/**
 * Define a router for post operations.
 * Ensure your Prisma schema defines a model named "Post" so that `prisma.post` exists.
 */
export const postRouter = createTRPCRouter({
  // A simple hello procedure.
  hello: publicProcedure
    .input(z.object({ text: z.string() }))
    .query(({ input }) => {
      return {
        greeting: `Hello ${input.text}`,
      };
    }),

  // A protected procedure to create a new post.
  create: protectedProcedure
    .input(z.object({ name: z.string().min(1) }))
    .mutation(async ({ ctx, input }) => {
      // Assumes `ctx.prisma` has a property "post" generated by Prisma.
      return ctx.prisma.post.create({
        data: {
          name: input.name,
          // Ensure that ctx.session.user exists.
          createdBy: { connect: { id: ctx.session.user.id } },
        },
      });
    }),

  // A protected procedure to fetch the latest post created by the user.
  getLatest: protectedProcedure.query(async ({ ctx }) => {
    const post = await ctx.prisma.post.findFirst({
      orderBy: { createdAt: "desc" },
      where: { createdBy: { id: ctx.session.user.id } },
    });
    return post ?? null;
  }),

  // A protected procedure that returns a secret message.
  getSecretMessage: protectedProcedure.query(() => {
    return "you can now see this secret message!";
  }),
});
